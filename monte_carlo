function [  dAvg, dMax ] = monte_carlo( Ta,Ts,da,ds )


%%%%%%%%%%%%%%%%%%%%%%use Euclidean Division to see whether worst-case latency is finite
if Ta<Ts
  y=Ts;
  z=Ta;
  exchange=0;
else
  y=Ta;
  z=Ts; 
  exchange=1;
end
i1=0;
i2=1;
j1=1;
j2=0;
N=1;
while (z)>=1e-7
  x=y;
  y=z;
  z=x;  
  times=floor(z/y)+sign(1.0*(((round(z/y)-z/y)<1e-9)&&((round(z/y)-z/y)>0)));
  z=z-y*times;
  tmp=i2;   
  i2=i1+times*i2;
  i1=tmp; 
  tmp=j2;
  j2=j1+times*j2;
  j1=tmp;
  N=N+1;
end
j=j1*(-1)^(N-1);
i=i1*(-1)^N;
if exchange==1
    tmp=j;
    j=i;
    i=tmp;
end
%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%monte-carlo simulation to get the worst-case latency and average latency
if Ts*j+Ta*i-(ds-da)>1e-8
  dAvg=Inf;
  dMax=Inf;  
else
  ds=ds-da;
  max_latency=0;
  sum=0;
  for i=1:10000000 
      offset=Ts*rand(1,1);%initial offset
      j=0;
      while ~(j*Ta+offset-Ts*floor((j*Ta+offset)/Ts)<=(ds))
          j=j+1;
      end
      if j*Ta+da>max_latency
          max_latency=j*Ta+da;
      end
      sum=sum+(j*Ta+da);
  end
 dAvg=sum/10000000;
 dMax=max_latency;   
end

end

